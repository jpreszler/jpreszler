<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recent Posts on Jason I. Preszler</title>
    <link>/post/</link>
    <description>Recent content in Recent Posts on Jason I. Preszler</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Jason Preszler</copyright>
    <lastBuildDate>Fri, 06 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Stock Random Walks</title>
      <link>/post/2018-01-15-stock-rw/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-01-15-stock-rw/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Recently a student in another course came to my office looking for someone “who could explain the Monte Carlo simulation” to her. I was caught a bit off-guard since (a) it was 10 minutes before my geometry class and (b) there is no single Monte Carlo simulation.&lt;/p&gt;
&lt;p&gt;After a brief discussion, I found out she wanted to predict stock prices using Monte Carlo simulation, but she thought that the Monte Carlo simulation provided the prediction - she couldn’t say how the actual predictions were being made which is the crucial part.&lt;/p&gt;
&lt;div id=&#34;aside-on-monte-carlo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Aside on Monte Carlo&lt;/h2&gt;
&lt;p&gt;If you are familiar with Monte Carlo simulations, skip this, but if not it may be worth reading.&lt;/p&gt;
&lt;p&gt;A Monte Carlo simulation is a process of using the outcomes of a random process to better understand the probability distribution of the process. The method of creating the outcomes if dependent on the situation (although it should utilize some type of random sampling).&lt;/p&gt;
&lt;p&gt;In my Computer Science classes, I have students use a Monte Carlo simulation to calculate &lt;span class=&#34;math inline&#34;&gt;\(\pi\)&lt;/span&gt; (I usually do this Intro Stats too). This involves choosing &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; values between &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; (uniform distribution) and seeing how many &lt;span class=&#34;math inline&#34;&gt;\((x,y)\)&lt;/span&gt; pairs are inside the unit circle. For a sufficiently large number of points, the ratio of the number inside to the total should be the same as the ratio of area of the unit circle to the area of the surrounding square (where all possible points lie).&lt;/p&gt;
&lt;p&gt;In Bayesian modelling, Markov Chain Monte Carlo simulations are run to get a sufficient understanding of the posterior probability distribution. This distribution is usually multivariate and except in particular circumstances doesn’t have a nice analytic definition.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;random-walks&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Random Walks&lt;/h1&gt;
&lt;p&gt;One way that we could use a Monte Carlo simulation to predict stock prices is to use a random walk to generate the predicted stock prices. There are many ways we could do this, some using lots of economics sophistication, but we’ll focus on the simpliest case to make the general process clear.&lt;/p&gt;
&lt;p&gt;A random walk is a random process that describes movement from a starting point over a number of steps through a space. For stocks, if we use the current price as the starting point then selecting normally distributed random numbers with mean of the start point, then the random numbers form a type of random walk (oscillating about the current price over time). More complex models could add (a) trends, (b) seasonality, (c) other distribution structures or combinations of the above.&lt;/p&gt;
&lt;p&gt;We’ll do the simple case &lt;span class=&#34;math display&#34;&gt;\[new~price = \mathrm{norm}(\mu=start~price, \sigma=?)\]&lt;/span&gt; and we’ll use stock data from Johnson and Johnson (NYSE:JNJ).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;jnj-prediction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;JNJ Prediction&lt;/h1&gt;
&lt;div id=&#34;the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Data&lt;/h2&gt;
&lt;p&gt;I downloaded weekly &lt;a href=&#34;/post/jnj-week.csv&#34;&gt;data&lt;/a&gt; for Johnson and Johnson from Yahoo finance. First, we’ll get rid of a couple coloumns and reduce the date range to 2017 and the start of 2018.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readr)
jnj_all &amp;lt;- read_csv(&amp;quot;../../static/files/jnj-week.csv&amp;quot;, 
    col_types = cols(Date = col_date(format = &amp;quot;%Y-%m-%d&amp;quot;)))
library(dplyr)

#Get 2017 (and early 2018) data
jnj17 &amp;lt;- jnj_all %&amp;gt;% select(Date, Close, High, Low) %&amp;gt;% filter(Date&amp;gt; as.Date(&amp;quot;2017-01-01&amp;quot;)) %&amp;gt;% arrange(Date)

#plot
library(ggplot2)
ggplot(jnj17, aes(x=Date,y=Close))+geom_line()+ggtitle(&amp;quot;JNJ Stock Price since 1/1/2017&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-15-stock-rw_files/figure-html/jnjData-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;single-random-walk&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Single Random Walk&lt;/h2&gt;
&lt;p&gt;First, we’ll build a single random walk. A Monte Carlo simulation will need lots of random walks, but if we can do one, lots should be easy.&lt;/p&gt;
&lt;p&gt;Do simplify things, I’m going to add an “index” variable instead of working explicitly with dates.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;jnj17$idx &amp;lt;- 1:length(jnj17$Close)
jnj17$type &amp;lt;- &amp;quot;Actual&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s make a random walk to predict the next 25 weeks of stock closing values. We’ll assume that the prices should be normally distributed around the most recent price and that the standard deviation will be the average of the weekly ranges over the last year(ish). This last bit is pretty arbitrary, we could use a standard deviation &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;, or something else justified by economics.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n&amp;lt;- length(jnj17$Close)
rw &amp;lt;- rnorm(25, mean = jnj17$Close[n], sd=mean(jnj17$High-jnj17$Close))

#build new data.frame
rwData &amp;lt;- data.frame(idx=(n+1):(n+25), Close=rw, type=rep(&amp;quot;RW&amp;quot;,25))

#table
library(knitr)
kable(rwData)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;idx&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Close&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;56&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;146.1546&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;145.6307&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;58&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;146.8759&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144.2193&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;60&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144.1649&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;61&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;145.4912&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;143.1149&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;63&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;145.6459&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;143.9866&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;65&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144.3844&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;66&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;146.4504&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;67&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144.9267&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;145.9113&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;69&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144.2581&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;70&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;145.7517&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;71&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;145.6574&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;145.4053&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;73&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;146.5685&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;74&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144.5791&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;147.0694&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;76&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;145.6478&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;148.3393&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144.8798&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;79&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144.9232&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;147.5887&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#plot
rbind.data.frame(select(jnj17, idx,Close,type), rwData) %&amp;gt;%
  ggplot(aes(x=idx,y=Close, col=type))+geom_line()+
  ggtitle(&amp;quot;JNJ Actual and Predicted Price&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-15-stock-rw_files/figure-html/firstRW-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is likely a bad prediction. The hope is that lots of similarly constructed predictions will give insight into the probability distribution of the future JNJ stock prices. This means we’ll need lots of random walks.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;multiple-random-walks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Multiple Random Walks&lt;/h2&gt;
&lt;p&gt;We just need to replicate what we did previously for an arbitrary number of times. To automate this, we’ll make a function to give a data frame with our random walk data, this will work with any similarly structured data (other stock data from Yahoo finance).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;randWalk &amp;lt;- function(typeName, len, obsData){
    n&amp;lt;- length(obsData$Close)
    rw &amp;lt;- rnorm(len, mean = obsData$Close[n], sd = mean(obsData$High - obsData$Close))

    #build new data.frame
    rwData &amp;lt;- data.frame(idx=(n+1):(n+len), Close=rw, type =                         rep(typeName,len))
    return(rwData)
}

#doing 7 random walks because of the colorblind palette
rwList &amp;lt;- lapply(1:7, function(x) {randWalk(paste(&amp;quot;RW&amp;quot;,x,sep=&amp;quot;&amp;quot;),25,jnj17)})

rwDF &amp;lt;- as.data.frame(bind_rows(rwList))
jnjPred &amp;lt;- rbind.data.frame(select(jnj17,idx,Close,type), rwDF)

#store colorblind palette
cbbPalette &amp;lt;- c(&amp;quot;#000000&amp;quot;, &amp;quot;#E69F00&amp;quot;, &amp;quot;#56B4E9&amp;quot;, &amp;quot;#009E73&amp;quot;, &amp;quot;#F0E442&amp;quot;, &amp;quot;#0072B2&amp;quot;, &amp;quot;#D55E00&amp;quot;, &amp;quot;#CC79A7&amp;quot;)

ggplot(jnjPred, aes(x=idx,y=Close,col=type))+geom_line()+ggtitle(&amp;quot;JNJ Predictions with Multiple Random Walks&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-15-stock-rw_files/figure-html/MCRW-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The collection of random walks are a random sample of all JNJ stock price predictions for the next 25 weeks. Because of how we build our predictions, we clearly see oscilation about the most recent actual close. By using a more informative prediction process, we may see more informative predictions but this would just alter our randWalk function.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>GGPlot and Geometric Transformations II: Inversions</title>
      <link>/post/2018-01-07-inversions/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-01-07-inversions/</guid>
      <description>&lt;p&gt;This is the second part of two posts about using ggplot to visualize geometric transformations in the complex plane.&lt;/p&gt;
&lt;div id=&#34;inversions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Inversions&lt;/h1&gt;
&lt;p&gt;For this post we’ll focus on inversions, having already covered rotations, translations, and reflections. An inversion can be thought of as a reflection across a circle, the the inside of the circle gets flipped to fill the plane outside the circle and the outside is flipped into the circle. This is a more complicated transformation, both to visualize and to perform mathematically, but is essential to geometry.&lt;/p&gt;
&lt;div id=&#34;the-math&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Math&lt;/h2&gt;
&lt;p&gt;Since an inversion involves a circle, we’ll need a center &lt;span class=&#34;math inline&#34;&gt;\(z_0 = x_0+iy_0\)&lt;/span&gt; and a radius &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;. Any point &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt; that’s within &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; of &lt;span class=&#34;math inline&#34;&gt;\(z_0\)&lt;/span&gt; must be moved to a point further than &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; from &lt;span class=&#34;math inline&#34;&gt;\(z_0\)&lt;/span&gt;, and should lie on a line connected &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(z_0\)&lt;/span&gt;. This is accomplished via the formula: &lt;span class=&#34;math display&#34;&gt;\[
inv(z) = \frac{r^2}{\overline{z-z_0}}+z_0
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Since dividing by a complex number is not really done, we can turn this formula into: &lt;span class=&#34;math display&#34;&gt;\[
inv(z) = \frac{r^2(z-z_0)}{|z-z_0|^2}+z_0
\]&lt;/span&gt; This may not look simpler, but it will be easier to write code for since it just multiples &lt;span class=&#34;math inline&#34;&gt;\(z-z_0\)&lt;/span&gt; by the square of the ratio of the radius to the distance from &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt; to &lt;span class=&#34;math inline&#34;&gt;\(z_0\)&lt;/span&gt;, then translates by &lt;span class=&#34;math inline&#34;&gt;\(z_0\)&lt;/span&gt;. Since the ratio of distances is real, this means we’re just translating &lt;span class=&#34;math inline&#34;&gt;\(z_0\)&lt;/span&gt; to the origin, dilating by the square of distance ratio, then translating back to &lt;span class=&#34;math inline&#34;&gt;\(z_0\)&lt;/span&gt;. Do we really even need new code? Not really.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The code&lt;/h2&gt;
&lt;p&gt;We use the translation and rotation functions from the previous post:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;translateR &amp;lt;- function(x,y,tx,ty){return (x+tx)}
translateI &amp;lt;- function(x,y,tx,ty){return (y+ty)}
rotateR &amp;lt;- function(x,y,rx,ry){return (x*rx-y*ry)}
rotateI &amp;lt;- function(x,y,rx,ry){return (x*ry+y*rx)}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our inversion function will apply these, and work well when handed a data.frame of points.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;inversion &amp;lt;- function(x,y,x0,y0,r){
  #set-up a data.frame to be returned
  pt &amp;lt;- data.frame(x=x, y=y)
  #translate z_0 to the origin
  pt$x &amp;lt;-translateR(x,y,-x0,-y0)
  pt$y &amp;lt;-translateI(x,y,-x0,-y0)
  #dilate
  distRatio &amp;lt;- r^2/((x-x0)^2+(y-y0)^2)
  pt[,1:2] &amp;lt;- c(rotateR(pt$x,pt$y,distRatio,0),
          rotateI(pt$x,pt$y,distRatio,0))
  #translate back
  pt[,1:2] &amp;lt;- c(translateR(pt$x,pt$y,x0,y0),
          translateI(pt$x,pt$y,x0,y0))
  return(pt)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;graphs-of-inversion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Graphs of Inversion&lt;/h1&gt;
&lt;p&gt;Let’s start by re-using our rectangle from previously and doing an inversion across the circle centered at the origin with radius 2.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rectangle &amp;lt;- data.frame(x = c(rep(seq(from=0, to=2, by=.1),2), rep(0,11),rep(2,11)),
                  y=c(rep(0,21),rep(1,21),rep(seq(0,1,by=.1),2)))
rectangle$code &amp;lt;- &amp;quot;Original&amp;quot;

invRect &amp;lt;- data.frame(x=rectangle$x, y=rectangle$y)

invRect[,1:2]&amp;lt;- inversion(rectangle$x, rectangle$y, 0,0,2)
invRect$code &amp;lt;- &amp;quot;Inverted&amp;quot;

library(ggplot2)
library(dplyr, quietly = TRUE)

rbind.data.frame(rectangle, invRect) %&amp;gt;% 
  ggplot(aes(x=x,y=y, col=code)) + geom_point(size=1) + xlim(c(-2,12)) + ylim(c(-2,12))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-07-inversions_files/figure-html/makeSquare-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Notice how lines through the center of the circle remain lines. The lower right corner, which is on the circle, if fixed, but the center of the circle is sent to the outer reaches of the plane. The upper right corner, which was outside the circle, gets flipped inside the circle.&lt;/p&gt;
&lt;p&gt;Let’s do another example, this time we’ll use a circle centered at &lt;span class=&#34;math inline&#34;&gt;\((-1,-1)\)&lt;/span&gt; with radius 4.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;invRect &amp;lt;- data.frame(x=rectangle$x, y=rectangle$y)

invRect[,1:2]&amp;lt;- inversion(rectangle$x, rectangle$y, -1,-1,4)
invRect$code &amp;lt;- &amp;quot;Inverted&amp;quot;

rbind.data.frame(rectangle, invRect) %&amp;gt;% 
  ggplot(aes(x=x,y=y, col=code)) + geom_point(size=1) + xlim(c(-2,12)) + ylim(c(-2,12))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-07-inversions_files/figure-html/secInv-1.png&#34; width=&#34;672&#34; /&gt; What if we take a rectangle outside of the circle and invert?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;invRect &amp;lt;- data.frame(x=rectangle$x, y=rectangle$y)

invRect[,1:2]&amp;lt;- inversion(rectangle$x, rectangle$y, 5,0,2)
invRect$code &amp;lt;- &amp;quot;Inverted&amp;quot;

rbind.data.frame(rectangle, invRect) %&amp;gt;% 
  ggplot(aes(x=x,y=y, col=code)) + geom_point(size=1) + xlim(c(-2,7)) + ylim(c(-2,3))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-07-inversions_files/figure-html/thirdInv-1.png&#34; width=&#34;672&#34; /&gt; Inversions aren’t a simple to predict as rotations and translations. I encourage you to experiment a bit: try other shapes, lines, or just collections of points. Do inversions preserve anything geometrically meaningful?&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>GGPlot and Geometric Transformations</title>
      <link>/post/2018-01-06-ggplot-and-geometric-transformations/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-01-06-ggplot-and-geometric-transformations/</guid>
      <description>&lt;p&gt;I’m currently teaching a Geometry course, and wished there was an easy way to illustrate geometric transformations for my students. I’m sure they’ll agree I’m not a great artist.&lt;/p&gt;
&lt;p&gt;Since R is my preferred way to draw any picture, I thought “Let’s use GGPlot to show transformations!”&lt;/p&gt;
&lt;p&gt;For those not versed in geometry, we would like to easily visualize translations (shifts along a vector), rotations, and dilations of points (or collections of points) in the complex plane. Reflections can be achieved via a combination of rotation and translation. Another important transformation, inversion, will be done in the next post.&lt;/p&gt;
&lt;div id=&#34;functions-for-the-transformations&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Functions for the transformations&lt;/h1&gt;
&lt;p&gt;I’m going to write separate functions for the real and imaginary parts of the result of each transformation, this is to make things easy to produce dataframes to send to ggplot. There are more efficient ways to do this, but I want all functions to have a consistent input/output structure so applying transformations and graphing the results is easy.&lt;/p&gt;
&lt;div id=&#34;translations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Translations&lt;/h2&gt;
&lt;p&gt;Mathematically, a translation in the complex plane is a function that adds a fixed number to the input. The inputs tx and ty are the real and imaginary parts of the point we’re translating by.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;translateR &amp;lt;- function(x,y,tx,ty){return (x+tx)}
translateI &amp;lt;- function(x,y,tx,ty){return (y+ty)}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;rotations-and-dilations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Rotations and Dilations&lt;/h2&gt;
&lt;p&gt;Mathematically, multiplying by a complex number rotates (about the origin) by it’s argument and dilates by it’s modulus. Similarly to above, rx and ry are the real and imaginary parts of the number we multiply by to achieve the rotation/dilation (ry=0 will be just a dilation).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rotateR &amp;lt;- function(x,y,rx,ry){return (x*rx-y*ry)}
rotateI &amp;lt;- function(x,y,rx,ry){return (x*ry+y*rx)}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rotations about a point other then the origin can be accomplished by applying a translation to the origin, rotation about the origin, and then translating back.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;illustrating-the-transformations&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Illustrating the transformations&lt;/h1&gt;
&lt;p&gt;To clearly show a transformation, let’s start with a collection on points in the complex plane:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rectangle &amp;lt;- data.frame(x = c(rep(seq(from=0, to=2, by=.1),2), rep(0,11),rep(2,11)),
                  y=c(rep(0,21),rep(1,21),rep(seq(0,1,by=.1),2)))
rectangle$code &amp;lt;- &amp;quot;Original&amp;quot;

library(ggplot2)
ggplot(rectangle, aes(x=x,y=y))+geom_point(size=1)+xlim(c(-5,5))+ylim(c(-5,5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-06-ggplot-and-geometric-transformations_files/figure-html/makeSquare-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now let’s try a translation by &lt;span class=&#34;math inline&#34;&gt;\(-1-2i\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trRectangle &amp;lt;- data.frame(x = translateR(rectangle$x, rectangle$y, -1,-2), 
                          y=translateI(rectangle$x, rectangle$y, -1,-2))
trRectangle$code &amp;lt;- &amp;quot;Translate&amp;quot;

library(dplyr)

rbind.data.frame(rectangle, trRectangle) %&amp;gt;%
  ggplot(aes(x=x,y=y,col=code))+geom_point(size=1)+
  xlim(c(-5,5))+ylim(c(-5,5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-06-ggplot-and-geometric-transformations_files/figure-html/applyTrans-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And a rotation by &lt;span class=&#34;math inline&#34;&gt;\(\frac{2+3i}{\sqrt{13}}\)&lt;/span&gt; (why pick nice numbers?):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rotRectangle &amp;lt;- data.frame(x = rotateR(rectangle$x, rectangle$y, 2/sqrt(13),3/sqrt(13)), 
                           y=rotateI(rectangle$x, rectangle$y, 2/sqrt(13),3/sqrt(13)))
rotRectangle$code &amp;lt;- &amp;quot;Rotation&amp;quot;

library(dplyr)

rbind.data.frame(rectangle, rotRectangle) %&amp;gt;%
  ggplot(aes(x=x,y=y,col=code))+geom_point(size=1)+
  xlim(c(-5,5))+ylim(c(-5,5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-06-ggplot-and-geometric-transformations_files/figure-html/applyRot-1.png&#34; width=&#34;672&#34; /&gt; We can also perform more complicated transformations. Let’s rotate about the original rectangle’s top right corner &lt;span class=&#34;math inline&#34;&gt;\(2+i\)&lt;/span&gt; by &lt;span class=&#34;math inline&#34;&gt;\(\frac{\pi}{4}\)&lt;/span&gt;, and double the size. This means we first move &lt;span class=&#34;math inline&#34;&gt;\((2,1)\)&lt;/span&gt; to the origin, rotate/dilate, then move back.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#translate to origin
glRect &amp;lt;- data.frame(x=translateR(rectangle$x, rectangle$y, -2,-1), 
                     y=translateI(rectangle$x, rectangle$y, -2,-1))


#rotate and dilate by 2e^{i*pi/4} = sqrt(2)+isqrt(2)
#
#We&amp;#39;re doing this in one line since both the real and imaginary
#rotations change and use the original coordinates. Two lines 
#would produce very different transformation.
glRect[,1:2] &amp;lt;- c(rotateR(glRect$x, glRect$y, sqrt(2), sqrt(2)) ,
                  rotateI(glRect$x, glRect$y, sqrt(2),sqrt(2)))

#Now translate back 
glRect$x &amp;lt;- translateR(glRect$x, glRect$y, 2,1)
glRect$y &amp;lt;- translateI(glRect$x, glRect$y, 2,1)

#add code for graph
glRect$code &amp;lt;-&amp;quot;Transformed&amp;quot;

#and graph
rbind.data.frame(rectangle, glRect) %&amp;gt;%
  ggplot(aes(x=x,y=y,col=code))+geom_point(size=1)+
  xlim(c(-5,5))+ylim(c(-5,5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-06-ggplot-and-geometric-transformations_files/figure-html/rotTrans-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The combination of rotation and translation can also produce a reflection about any line.&lt;/p&gt;
&lt;p&gt;Next up, inversions…&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts on Severe Class Imbalance </title>
      <link>/post/2018-01-01/</link>
      <pubDate>Tue, 02 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-01-01/</guid>
      <description>&lt;p&gt;Besides lots of family time and the creation of this blog/website, this is what I’ve been thinking about over the winter break.&lt;/p&gt;
&lt;div id=&#34;background&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;As part of my research in &lt;em&gt;emergent reducibility&lt;/em&gt;, I’ve had to face a binary classification situation with severe class imbalance. Among brute-force searches, it seems that there’s roughly 1 case of emergent reducibility (what I’m looking for) for every 1 million irreducible cubic polynomials. It is known that there are infinitely many cubic polynomials with emergent reducibility.&lt;/p&gt;
&lt;p&gt;One standard way of dealing with class imbalance is to artificially increase the incidence of positive cases in the training data, but I’ve seen very little about how to decide how much to adjust the ratio of the two classes - that’s what this post is about.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;training-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Training Data&lt;/h1&gt;
&lt;p&gt;To examine the relationship of class imbalance on several classifiers, I build 21 training sets each with the same 52 cases of emergent reducibility and between 500 and 2500 (by 100 increments) polynomials without emergent reducibility. Each training set was used to train a variety of logristic regression, random forest, naive Bayes, and k-nearest neighbor models via caret.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;confusion-matrices&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Confusion Matrices&lt;/h1&gt;
&lt;p&gt;Once the models were trained, they were all tested against the same data set with 23 cases of emergent reducibility (no overlap with training data) and 8000 cases without emergent reducibility. For each model and training set combination, a confusion “matrix” was build, this is in the file &lt;a href=&#34;/post/confMats.csv&#34;&gt;confMats.csv&lt;/a&gt;. Let’s read that into R and add another variable, &lt;em&gt;mdlType&lt;/em&gt; that’s either &lt;em&gt;logistic&lt;/em&gt;, &lt;em&gt;RF&lt;/em&gt;, or &lt;em&gt;other&lt;/em&gt;. This is to facet some graphs later.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;confMats &amp;lt;- read.csv(&amp;quot;../../static/post/confMats.csv&amp;quot;, header=TRUE)

logLocations &amp;lt;- grep(&amp;quot;lr&amp;quot;, confMats$mdl)
rfLocations &amp;lt;- grep(&amp;quot;rf&amp;quot;, confMats$mdl)

confMats$mdlType &amp;lt;- vector(mode=&amp;quot;character&amp;quot;, length=length(confMats$mdl))

confMats[logLocations,]$mdlType &amp;lt;- &amp;quot;Logistic&amp;quot;
confMats[rfLocations,]$mdlType &amp;lt;- &amp;quot;RF&amp;quot;
confMats[!(1:length(confMats$mdl) %in% c(logLocations,rfLocations)),]$mdlType&amp;lt;-&amp;quot;Other&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;roc-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;ROC Plots&lt;/h1&gt;
&lt;p&gt;Now we’ll plot our confusion matrices in ROC space, each point is a model and training set combo. I’ve facetted by model type for readability.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)

#11 distinct colors, courtesy of colorbrewer2.org
cb11&amp;lt;-c(&amp;#39;#a6cee3&amp;#39;,&amp;#39;#1f78b4&amp;#39;,&amp;#39;#b2df8a&amp;#39;,&amp;#39;#33a02c&amp;#39;,&amp;#39;#fb9a99&amp;#39;,&amp;#39;#e31a1c&amp;#39;,&amp;#39;#fdbf6f&amp;#39;,&amp;#39;#ff7f00&amp;#39;,&amp;#39;#cab2d6&amp;#39;,&amp;#39;#6a3d9a&amp;#39;,&amp;#39;#ffff99&amp;#39;)
ggplot(confMats,aes(x=FP/(FP+TN),y=TP/(TP+FN),col=mdl))+geom_point()+facet_wrap(~mdlType)+scale_color_manual(values=cb11)+ggtitle(&amp;quot;ROC Plots of Models and Class Imbalance &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-01_files/figure-html/scatter-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The model &lt;em&gt;max&lt;/em&gt; seems to find the most, but this simply marks a polynomial as having emergent reducibility if any other model says it does. This indicates some models find cases that others miss (I have some nice heatmaps showing this also, for another day). The logistic regression models have much more irregular variation than I was expecting.&lt;/p&gt;
&lt;p&gt;To see how varying the number of non-emergent reducibile polynomials impacts performance, I’ll throw in some animation:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gganimate)

pathPlot &amp;lt;- ggplot(confMats,aes(x=FP/(FP+TN),y=TP/(TP+FN),col=mdl,frame=ner))+geom_path(aes(cumulative=TRUE, group=mdl))+facet_wrap(~mdlType)+scale_color_manual(values=cb11)+ggtitle(&amp;quot;Animated ROC Paths&amp;quot;)

gganimate(pathPlot, &amp;quot;../../static/post/pathPlot.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’m saving the gif and then displaying it outside the code chunk. This is because animated graphs seem to be turned pink inside code chunks.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/post/pathPlot.gif&#34; alt=&#34;pathPlot.gif&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;pathPlot.gif&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The random forest and knn models seem pretty stable as the number of non-emergent reducible case changes. Looking at the number of true positives we see a gradual decline as &lt;em&gt;ner&lt;/em&gt; increases:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(knitr)
nerRF.tab &amp;lt;- xtabs(TP~ner+mdl, data=confMats[confMats$mdl %in% c(&amp;quot;rfs&amp;quot;,&amp;quot;rfp&amp;quot;,&amp;quot;rfpp&amp;quot;,&amp;quot;rfsq&amp;quot;,&amp;quot;knn&amp;quot;),], drop.unused.levels = TRUE)
kable(nerRF.tab)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;knn&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;rfp&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;rfpp&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;rfs&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;rfsq&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;500&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;600&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;700&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;800&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;900&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1100&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1300&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1500&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1600&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1700&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1800&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1900&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2100&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2300&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2500&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The logistic regression models show the odd variation:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;TPnerLR.tab &amp;lt;- xtabs(TP~ner+mdl, data=confMats[confMats$mdlType == &amp;quot;Logistic&amp;quot;,], drop.unused.levels = TRUE)
kable(TPnerLR.tab)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lrp&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lrs&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lrsq&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;500&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;600&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;700&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;800&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;900&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1100&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1300&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1500&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1600&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1700&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1800&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1900&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2100&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2300&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2500&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The variation across elements of the confusion matrices is perhaps best seen in the following plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyr)
library(dplyr)

gather(confMats, key=Type, value=Count, -c(ner, mdl, mdlType)) %&amp;gt;% ggplot(aes(x=ner, y=Count, col=mdl))+geom_line()+facet_wrap(~Type, scales = &amp;quot;free_y&amp;quot;)+ggtitle(&amp;quot;Confusion Matrix Visual as Training Class Imbalance Changes&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-01_files/figure-html/CMplot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Clearly, there’s something in the &lt;em&gt;ner&lt;/em&gt; 1500,1700,1800, and 2300 training sets that really helps logistic models but not other model types. This is something to look into.&lt;/p&gt;
&lt;p&gt;However, I’m still left wondering &lt;em&gt;What is the best ratio of classes in a training set?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
