<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Curriculum on Jason I. Preszler</title>
    <link>/tags/curriculum/</link>
    <description>Recent content in Curriculum on Jason I. Preszler</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Jason Preszler</copyright>
    <lastBuildDate>Sat, 28 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/curriculum/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Catalog Evolution</title>
      <link>/post/2018-07-28-cat-evolve/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-28-cat-evolve/</guid>
      <description>Recently I’ve posted about the College of Idaho’s 2017-2018 and 2018-2019 course distribution. The second post showed how easy it was to reproduce everything, which was good because a colleague recently asked about the total number of courses in 2016-2017 for a funded grant related to curriculum review. These total numbers of courses of courses made me wonder about how the catalog has evolved over the last few years?</description>
    </item>
    
    <item>
      <title>Re-Counting Classes</title>
      <link>/post/2018-07-24-recount-class/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-24-recount-class/</guid>
      <description>Edit 7/27/2018 I realized that MFL’s name change to WLC didn’t change the prefix of their courses, this broke my scrapper. Below is an updated post that deals with this.
Back in early May, I wrote a post about scraping the College of Idaho catalog: Counting Classes. Below if the same post (boring…) except that the “current catalog” has been updated. This is really a demonstration of reproducibility, the upstream data has changed and ideally all my code still works.</description>
    </item>
    
    <item>
      <title>Maps Majors in Neo4J</title>
      <link>/post/2018-06-18-neo4j-majors/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-18-neo4j-majors/</guid>
      <description>UPDATE (6/20/2018) The cypher query for Table 3 only used components with “optional” courses so the capstone and topics compnents of the Math/CS major weren’t included in table 3.
UPDATE (6/19/2018) The original version of this post used incorrectly loaded data that caused to “Core” of every major to have the same classes attached to it. This was noticed by my colleague Dave Rosoff and has been corrected.</description>
    </item>
    
    <item>
      <title>Maps Minors in Neo4J</title>
      <link>/post/2018-06-16-neo4j-demo/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-16-neo4j-demo/</guid>
      <description>A college curriculum seems like something that is a natural fit for a graph database. My last post collected data from the College of Idaho’s online catalog, using that and some information about majors and minors I’ve populated a graph database in Neo4j. In this post I’ll show how to do some basic queries that return tabular data as well as graph data using .
Graph DB Basics For those who haven’t had much discrete math or computer science, a graph is a collection of nodes (aka vertices) and edges that connect nodes.</description>
    </item>
    
    <item>
      <title>Counting Classes: The Basics</title>
      <link>/post/2018-05-05-counting-class/</link>
      <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-05-05-counting-class/</guid>
      <description>At the College of Idaho, there’s been discussion about visualizing the curriculum as well as understanding the curriculum. Naturally this interests me as a chance to wallow in some complicated data (students are required to complete a major and 3 minors across 4 “peaks” rather than complete courses from a traditional “core”). I thought using R and a Neo4j graph database would be useful (something to look forward to) - but first I needed to get data from the catalogue!</description>
    </item>
    
    <item>
      <title>What a Tangled Web We Weave...</title>
      <link>/post/2018-08-21-chords/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-08-21-chords/</guid>
      <description>chorddiag( xtabs(~MAJOR+minor, data = mmhl[mmhl$Grad.Year == 2017,], drop.unused.levels = TRUE), showTicks = FALSE, groupColors = many_colors, type = &amp;quot;bipartite&amp;quot; )  {&#34;x&#34;:{&#34;matrix&#34;:[[0,0,0,0,0,0,0,0,2,2,0,1,0,0,2,0,0,0,0,0,5,0,1,1,4,1,3,1],[0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0],[0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,4,0,0,1,0,0,1,0,1,3,0,1,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0],[2,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[4,1,1,0,1,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],&#34;options&#34;:{&#34;type&#34;:&#34;bipartite&#34;,&#34;width&#34;:null,&#34;height&#34;:null,&#34;margin&#34;:100,&#34;showGroupnames&#34;:true,&#34;groupNames&#34;:[&#34;BUS&#34;,&#34;CHE&#34;,&#34;HEA&#34;,&#34;HIS&#34;,&#34;MAT&#34;,&#34;MATCS&#34;,&#34;MATPH&#34;,&#34;THE&#34;,&#34;ais&#34;,&#34;artde&#34;,&#34;bus&#34;,&#34;criju&#34;,&#34;crw&#34;,&#34;csc&#34;,&#34;csd&#34;,&#34;dueng&#34;,&#34;ed10&#34;,&#34;fre&#34;,&#34;his&#34;,&#34;hpmed&#34;,&#34;matap&#34;,&#34;phi&#34;,&#34;phsci&#34;,&#34;poec&#34;,&#34;psy&#34;,&#34;relst&#34;,&#34;spa&#34;,&#34;vstdy&#34;],&#34;groupColors&#34;:[&#34;#7FC97F&#34;,&#34;#BEAED4&#34;,&#34;#FDC086&#34;,&#34;#FFFF99&#34;,&#34;#386CB0&#34;,&#34;#F0027F&#34;,&#34;#BF5B17&#34;,&#34;#666666&#34;,&#34;#1B9E77&#34;,&#34;#D95F02&#34;,&#34;#7570B3&#34;,&#34;#E7298A&#34;,&#34;#66A61E&#34;,&#34;#E6AB02&#34;,&#34;#A6761D&#34;,&#34;#666666&#34;,&#34;#A6CEE3&#34;,&#34;#1F78B4&#34;,&#34;#B2DF8A&#34;,&#34;#33A02C&#34;,&#34;#FB9A99&#34;,&#34;#E31A1C&#34;,&#34;#FDBF6F&#34;,&#34;#FF7F00&#34;,&#34;#CAB2D6&#34;,&#34;#6A3D9A&#34;,&#34;#FFFF99&#34;,&#34;#B15928&#34;,&#34;#FBB4AE&#34;,&#34;#B3CDE3&#34;,&#34;#CCEBC5&#34;,&#34;#DECBE4&#34;,&#34;#FED9A6&#34;,&#34;#FFFFCC&#34;,&#34;#E5D8BD&#34;,&#34;#FDDAEC&#34;,&#34;#F2F2F2&#34;,&#34;#B3E2CD&#34;,&#34;#FDCDAC&#34;,&#34;#CBD5E8&#34;,&#34;#F4CAE4&#34;,&#34;#E6F5C9&#34;,&#34;#FFF2AE&#34;,&#34;#F1E2CC&#34;,&#34;#CCCCCC&#34;,&#34;#E41A1C&#34;,&#34;#377EB8&#34;,&#34;#4DAF4A&#34;,&#34;#984EA3&#34;,&#34;#FF7F00&#34;,&#34;#FFFF33&#34;,&#34;#A65628&#34;,&#34;#F781BF&#34;,&#34;#999999&#34;,&#34;#66C2A5&#34;,&#34;#FC8D62&#34;,&#34;#8DA0CB&#34;,&#34;#E78AC3&#34;,&#34;#A6D854&#34;,&#34;#FFD92F&#34;,&#34;#E5C494&#34;,&#34;#B3B3B3&#34;,&#34;#8DD3C7&#34;,&#34;#FFFFB3&#34;,&#34;#BEBADA&#34;,&#34;#FB8072&#34;,&#34;#80B1D3&#34;,&#34;#FDB462&#34;,&#34;#B3DE69&#34;,&#34;#FCCDE5&#34;,&#34;#D9D9D9&#34;,&#34;#BC80BD&#34;,&#34;#CCEBC5&#34;,&#34;#FFED6F&#34;],&#34;groupThickness&#34;:0.1,&#34;groupPadding&#34;:0.0349065850398866,&#34;groupnamePadding&#34;:[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30],&#34;groupnameFontsize&#34;:18,&#34;groupedgeColor&#34;:null,&#34;chordedgeColor&#34;:&#34;#808080&#34;,&#34;categoryNames&#34;:[&#34;MAJOR&#34;,&#34;minor&#34;],&#34;categorynamePadding&#34;:100,&#34;categorynameFontsize&#34;:28,&#34;showTicks&#34;:false,&#34;tickInterval&#34;:0.1,&#34;ticklabelFontsize&#34;:10,&#34;fadeLevel&#34;:0.1,&#34;showTooltips&#34;:true,&#34;showZeroTooltips&#34;:true,&#34;tooltipNames&#34;:[&#34;BUS&#34;,&#34;CHE&#34;,&#34;HEA&#34;,&#34;HIS&#34;,&#34;MAT&#34;,&#34;MATCS&#34;,&#34;MATPH&#34;,&#34;THE&#34;,&#34;ais&#34;,&#34;artde&#34;,&#34;bus&#34;,&#34;criju&#34;,&#34;crw&#34;,&#34;csc&#34;,&#34;csd&#34;,&#34;dueng&#34;,&#34;ed10&#34;,&#34;fre&#34;,&#34;his&#34;,&#34;hpmed&#34;,&#34;matap&#34;,&#34;phi&#34;,&#34;phsci&#34;,&#34;poec&#34;,&#34;psy&#34;,&#34;relst&#34;,&#34;spa&#34;,&#34;vstdy&#34;],&#34;tooltipFontsize&#34;:12,&#34;tooltipUnit&#34;:&#34;&#34;,&#34;tooltipGroupConnector&#34;:&#34; &amp;#x25B6; &#34;,&#34;precision&#34;:&#34;null&#34;,&#34;clickAction&#34;:null,&#34;clickGroupAction&#34;:null}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]} The point of this post is to illustrate how to make the above “chord diagram” using the chorddiag package which leverages D3.js from R. The above visual shows students major/minor combinations who graduated in 2017 from the College of Idaho with at least one minor connected to my department: MAPS.</description>
    </item>
    
  </channel>
</rss>