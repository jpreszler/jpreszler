major_url <- html_attr(majorLinks, 'href')[35:69]
#pick out what corresponds to subject list
#we now have subject codes and names
majorText <- majorText[35:69]
majorDF <- data.frame(Major = majorText)
#get url for subject, for each row in subDF
#subDF <-subDF %>% mutate(url= paste0(base_url,base_url_ext,'/',sub,'-',str_replace_all(subject,' ','-')))
majorDF <- mutate(majorDF, url=paste0(base_url,major_url))
get_class_list <- function(i){
# if(i==12){
#  return(data.frame(Minor=minorDF$Minor[i], sub = "", num = "", url=""))
#}
#get list of links on subject page
class_links <- html_nodes(read_html(majorDF$url[i]), 'a')
#turn links to text
class_list <- html_text(class_links)
class_url <- html_attr(class_links, 'href')
classDF <- data.frame(Minor = rep(majorDF$Major[i], length(class_list)), list=class_list, url=class_url)
#only keep links for classes, each subject has
#classes starting in a different position
classDF <- classDF %>% filter(str_detect(list, "[:upper:]{2,}-[:digit:]+"))
#two theater classes have typos -THE-###
#this is solely dealing with that
classDF$list <- str_replace(classDF$list, "-THE", "THE")
#back to normal
classDF <- separate(classDF, list, into=c("sub", "number"), sep="-")
#the id field has the last part of the new url, we need the
#subject url with the course level (100,200,etc) then id
classDF <- mutate(classDF,url=paste0(base_url,url))
#for test/debug
#print(i)
return(classDF)
}
classes <- map_dfr(1:length(majorDF$Major), get_class_list)
View(classes)
get_class_list <- function(i){
# if(i==12){
#  return(data.frame(Minor=minorDF$Minor[i], sub = "", num = "", url=""))
#}
#get list of links on subject page
class_links <- html_nodes(read_html(majorDF$url[i]), 'a')
#turn links to text
class_list <- html_text(class_links)
class_url <- html_attr(class_links, 'href')
classDF <- data.frame(Major = rep(majorDF$Major[i], length(class_list)), list=class_list, url=class_url)
#only keep links for classes, each subject has
#classes starting in a different position
classDF <- classDF %>% filter(str_detect(list, "[:upper:]{2,}-[:digit:]+"))
#two theater classes have typos -THE-###
#this is solely dealing with that
classDF$list <- str_replace(classDF$list, "-THE", "THE")
#back to normal
classDF <- separate(classDF, list, into=c("sub", "number"), sep="-")
#the id field has the last part of the new url, we need the
#subject url with the course level (100,200,etc) then id
classDF <- mutate(classDF,url=paste0(base_url,url))
#for test/debug
#print(i)
return(classDF)
}
classes <- map_dfr(1:length(majorDF$Major), get_class_list)
classes2 <- classes[!duplicated(classes),]
View(classes2)
shiny::runApp('github-web/CofI-Shiny/Course_Time')
forestfires <- read.csv("~/Downloads/forestfires.csv")
View(forestfires)
ff1 <- lm(area~temp+RH+wind+rain, data=forestfires)
summary(ff1)
ggplot(ff1, aes(x=.fitted, y=.resid))+geom_point()
library(ggplot2)
ggplot(ff1, aes(x=.fitted, y=.resid))+geom_point()
boxplot(forestfires$area)
summary(forestfires$area)
library(dplyr)
ffc <- forestfires %>% select(month, day, temp, RH, wind, rain, area) %>% filter(area < 200)
boxplot(ffc$area)
summary(ffc$area)
ffc$la <- log(ffc$area)
boxplot(ffc$la)
View(ffc)
ffc <- forestfires %>% select(month, day, temp, RH, wind, rain, area) %>% filter(area < 100, area>0)
summary(ffc$area)
library(GGally)
ggpairs(ffc)
summary(ffc$month)
ffc <- forestfires %>% select(month, day, temp, RH, wind, rain, area) %>% filter(area < 100, area>0, month=="aug" | month=="sep")
library(lme4)
MASS::DDT
write.csv(ffc, file="forest-fires2.csv", row.names = FALSE)
write.csv(ffc, file="~/Downloads/forest-fires2.csv", row.names = FALSE)
library(ggplot2)
data("swiss")
names(swiss)
data("diamonds")
names(diamonds)
summary(lm(price~carat+color+cut+clarity, data=diamonds))
summary(lm(price~carat+color+cut, data=diamonds))
summary(lm(price~carat+cut, data=diamonds))
summary(lm(price~carat, data=diamonds))
names(diamonds)
View(diamonds)
summary(lm(price~depth+table, data=diamonds))
titanic <- read.csv("~/Downloads/titanic.csv")
View(titanic)
train <- read.csv("~/Downloads/train.csv")
View(train)
trIdx <- sample(1:length(train$PassengerId), .8*length(train$PassengerId), replace=FALSE)
titanic <- train[trIdx,]
library(dplyr)
?Titanic
titanic <- titanic %>% select(-Name)
View(titanic)
titanicTST <- train[-trIdx,] %>% select(-Name)
write.csv(titanic, file="~/gitlab/m212/titanic-train.csv", row.names = FALSE)
write.csv(select(titanicTST, -Survived), file="~/gitlab/m212/titanic-test.csv", row.names = FALSE)
write.csv(titanicTST, file="~/gitlab/m212/titanic-test-real.csv", row.names = FALSE)
titanic.glm <- glm(Survived ~ Pclass+Sex+Age+Fare, data=titanic, family=binomial())
?predict
predict(titanic.glm)
predict(titanic.glm, type = "prob")
predict(titanic.glm, type = "link")
predict(titanic.glm, type = "response")
titanic$predict <- predict(titanic.glm, type = "response")
titanic$predict <- predict(titanic.glm, titanic[,-2],type = "response")
View(titanic)
length(is.na(titanic$predict))
sum(is.na(titanic$predict))
712-141
library(caret)
shiny::runApp('github-web/CofI-Shiny/TitanicTest')
runApp('github-web/CofI-Shiny/TitanicTest')
runApp('github-web/CofI-Shiny/TitanicTest')
runApp('github-web/CofI-Shiny/TitanicTest')
runApp('github-web/CofI-Shiny/TitanicTest')
runApp('github-web/CofI-Shiny/TitanicTest')
runApp('github-web/CofI-Shiny/TitanicTest')
runApp('github-web/CofI-Shiny/TitanicTest')
1600-1573.23
26.77+378.82
A.pyClust <- read.csv("~/gitlab/math-placement/data/A-pyClust.csv")
View(A.pyClust)
A.pyClust$gml <- ifelse(A.pyClust$gml==0, 1, 0)
A.pyClust$acl <- ifelse(A.pyClust$acl==0, 1, 0)
library(ggplot2)
ggplot(A.pyClust, aes(x=score, y=subscore, col=Crs, size=(kml+scl+acl+gml)))+geom_point()
ggplot(A.pyClust, aes(x=score, y=subscore, col=as.factor(Crs), size=(kml+scl+acl+gml)))+geom_point()
ggplot(A.pyClust, aes(x=score, y=subscore, col=as.factor(Crs), shape=as.factor(kml+scl+acl+gml), alpha=FinalAve))+geom_point()
ggplot(A.pyClust, aes(x=score, y=subscore, col=as.factor(Crs), shape=as.factor(kml+scl+acl+gml), size=FinalAve))+geom_point()
library(dplyr)
A.pyClust %>% filter(subscore>.5, Crs==101)
A.pyClust %>% filter(subscore>.5, Crs==101) %>% select(LastName) -> m101gLN
A.pyClust %>% filter(LastName %in% m101gLN)
m101gLN
A.pyClust %>% filter(LastName %in% m101gLN$LastName)
library(caret)
mp.rf <- train(Course~ score+subscore+kml+scl+acl+gml+X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16, method="rf", trControl = trainControl(method="cv", number=7))
mp.rf <- train(Course~ score+subscore+kml+scl+acl+gml+X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16, data=A.pyClust,method="rf", trControl = trainControl(method="cv", number=7))
varImp(mp.rf)
mp.rf$bestTune
mp.rf$finalModel$err.rate
mp.rf$finalModel$confusion
varImp(mp.rf)
mp.rf <- train(Course~ score+subscore+kml+scl+acl+gml, data=A.pyClust,method="rf", trControl = trainControl(method="cv", number=7))
varImp(mp.rf)
library(GGally)
ggpairs(A.pyClust[,c(7,36:41)])
mp.rf$finalModel$importanceSD
mp.rf$finalModel$importance
mp.rf <- train(Course~ score+kml+scl+acl+gml+X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16, data=A.pyClust,method="rf", trControl = trainControl(method="cv", number=7))
varImp(mp.rf)
mp.rf <- train(Course~ kml+scl+acl+gml+X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16, data=A.pyClust,method="rf", trControl = trainControl(method="cv", number=7))
varImp(mp.rf)
mp.rf <- train(Course~ kml+scl+gml+X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16, data=A.pyClust,method="rf", trControl = trainControl(method="cv", number=7))
varImp(mp.rf)
mp.rf <- train(Course~ kml+scl+gml+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16, data=A.pyClust,method="rf", trControl = trainControl(method="cv", number=7))
varImp(mp.rf)
library(readr)
frisk_with_noise <- read_table2("gitlab/m212/frisk_with_noise.dat",
skip = 6)
View(frisk_with_noise)
frisk <- frisk_with_noise %>% filter(past.arrests > 0)
library(dplyr)
frisk <- frisk_with_noise %>% filter(past.arrests > 0)
frisk$eth <- ifelse(frisk$eth==1, "black", ifelse(frisk$eth==2,"hispanic", "white"))
stop2 <- glm(stops~eth, data=frisk, family=poisson, offset=log(past.arrests))
summary(stop2)
stop2$residuals
stop2$effects
stop2$deviance
residuals(stop2, type = "pearson")
View(frisk)
s2resid <- data.frame(eth=frisk$eth, stops = frisk$stops, dev.resid = residuals(stop2, type="deviance"), pearson.resid = residuals(stop2, type="pearson", std.resid = residuals(stop2, type="response"), predicted = predict(stop2, frisk[,-1])))
View(s2resid)
s2resid <- data.frame(eth=frisk$eth, stops = frisk$stops, dev.resid = residuals(stop2, type="deviance"), pearson.resid = residuals(stop2, type="pearson"), std.resid = residuals(stop2, type="response"), predicted = predict(stop2, frisk[,-1]))
s2resid <- data.frame(eth=frisk$eth, stops = frisk$stops, dev.resid = residuals(stop2, type="deviance"), pearson.resid = residuals(stop2, type="pearson"), std.resid = residuals(stop2, type="response"), predicted = predict(stop2, frisk[,-1], type="response"))
library(tidyr)
library(ggplot2)
gather(s2resid, key="resid.type", value="residual", -c(eth, stops, predicted)) %>% ggplot(aes(x=stops, y=residual, col=eth))+geom_point()+facet_wrap(~resid.type)
gather(s2resid, key="resid.type", value="residual", -c(eth, stops, predicted)) %>% ggplot(aes(x=stops, y=residual, col=eth))+geom_point()+facet_wrap(~resid.type, scales = "free_y")
ggplot(stop2, aes(x=.fitted, y=.resid))+geom_point()
ggplot(stop2, aes(x=exp(.fitted), y=.resid))+geom_point()
ggplot(stop2, aes(x=exp(.fitted), y=exp(.resid)))+geom_point()
gather(s2resid, key="resid.type", value="residual", -c(eth, stops, predicted)) %>% ggplot(aes(x=fitted(stop2), y=residual, col=eth))+geom_point()+facet_wrap(~resid.type, scales = "free_y")
gather(s2resid, key="resid.type", value="residual", -c(eth, stops, predicted)) %>% ggplot(aes(x=fitted(stop2), y=residual))+geom_point()+facet_wrap(~resid.type, scales = "free_y")
ggplot(s2resid, aes(x=fitted(stop2), y=dev.resid))+geom_point()
ggplot(s2resid, aes(x=fitted(stop2), y=std.resid))+geom_point()
ggplot(s2resid, aes(x=fitted(stop2), y=pearson.resid))+geom_point()
gather(s2resid, key="resid.type", value="residual", -c(eth, stops, predicted)) %>% ggplot(aes(x=stops, y=residual, col=eth))+geom_point()+facet_wrap(~resid.type, scales = "free_y")
gather(s2resid, key="resid.type", value="residual", -c(eth, stops, predicted)) %>% ggplot(aes(x=stops, y=residual))+geom_point()+facet_wrap(~resid.type, scales = "free_y")
glimpse(frisk)
frisk$eth <- as.factor(frisk$eth)
stop2 <- glm(stops~eth, data=frisk, family=poisson, offset=log(past.arrests))
ggplot(stop2, aes(x=.fitted, y=.resid))+geom_point()
stop2$fitted.values
summary(stop2$fitted.values)
summary(log(stop2$fitted.values))
s2resid <- data.frame(eth=frisk$eth, stops = frisk$stops, dev.resid = residuals(stop2, type="deviance"), pearson.resid = residuals(stop2, type="pearson"), std.resid = residuals(stop2, type="response"), predicted = predict(stop2, frisk[,-1], type="response"))
(s2resid$stops-s2resid$predicted)/sqrt(s2resid$predicted) %>% head()
stop3 <- glm(stops~eth+factor(precinct), data=frisk, family=poisson, offset=log(past.arrests))
s3resid <- data.frame(eth=frisk$eth, precinct = frisk$precinct, stops = frisk$stops, dev.resid = residuals(stop3, type="deviance"), pearson.resid = residuals(stop3, type="pearson"), std.resid = residuals(stop3, type="response"), predicted = predict(stop3, frisk[,-1], type="response"))
gather(s2resid, key="resid.type", value="residual", -c(eth, stops, predicted)) %>% ggplot(aes(x=stops, y=residual))+geom_point()+facet_wrap(~resid.type, scales = "free_y")
gather(s3resid, key="resid.type", value="residual", -c(eth, stops, predicted)) %>% ggplot(aes(x=stops, y=residual))+geom_point()+facet_wrap(~resid.type, scales = "free_y")
gather(s3resid, key="resid.type", value="residual", -c(eth, stops, predicted, precinct)) %>% ggplot(aes(x=stops, y=residual))+geom_point()+facet_wrap(~resid.type, scales = "free_y")
ggplot(frisk, aes(x=precinct, y=stops))+geom_point()
ggplot(frisk, aes(x=precinct, y=stops, col=eth))+geom_point()
sum(s2resid$std.resid^2/s2resid$predicted)
sum(s3resid$std.resid^2/s3resid$predicted)
pchisq(279399.4, df=898)
pchisq(214744.1, df=898)
summary(stop3)
summary(stop2)
pchisq(214744.1, df=822)
pchisq(279399.4, df=896)
mean(frisk$stops)
var(frisk$stops)
length(unique(frisk$precinct))
length(unique(frisk$eth))
3*75
xtabs(~eth+precinct, data=frisk)
gather(s3resid, key="resid.type", value="residual", -c(eth, stops, predicted, precinct)) %>% ggplot(aes(x=log(stops), y=residual))+geom_point()+facet_wrap(~resid.type, scales = "free_y")
stop4 <- glm(stops~eth+factor(precinct), data=frisk, family=quasipoisson, offset=log(past.arrests))
s4resid <- data.frame(eth=frisk$eth, precinct = frisk$precinct, stops = frisk$stops, dev.resid = residuals(stop4, type="deviance"), pearson.resid = residuals(stop4, type="pearson"), std.resid = residuals(stop4, type="response"), predicted = predict(stop4, frisk[,-1], type="response"))
gather(s4resid, key="resid.type", value="residual", -c(eth, stops, predicted, precinct)) %>% ggplot(aes(x=log(stops), y=residual))+geom_point()+facet_wrap(~resid.type, scales = "free_y")
stop4 <- glm(stops~eth+factor(precinct), data=frisk, family=negative.binomial, offset=log(past.arrests))
stop4 <- glm(stops~eth+factor(precinct), data=frisk, family=nb, offset=log(past.arrests))
stop4 <- glm.nb(stops~eth+factor(precinct), data=frisk, offset=log(past.arrests))
summary(stop2)$dispersion
summary(stop3)$dispersion
stop4 <- glm(stops~eth+factor(precinct), data=frisk, family=quasipoisson, offset=log(past.arrests))
summary(stop4)$dispersion
data(HistData::Dactyl)
library(HistData)
data("Dactyl")
head(Dactyl)
length(unique(Dactyl$Foot))
data("Yeast")
head(Yeast)
summary(stop3)
141283/822
library(dplyr)
library(ggplot2)
library(visNetwork)
propComp <- read.csv("prop-comp.csv", header=TRUE)
propVis <- read.csv("peak-prop-vis.csv", header=TRUE)
View(propVis)
View(propComp)
propComp <- read.csv("prop-comp.csv", header=TRUE)
propVis <- read.csv("peak-prop-vis.csv", header=TRUE)
?geom_bar
?stat_count
?visNetwork
propVisLong <- gather(propVis, key="Component", value="Credits", -proposal)
library(tidyr)
propVisLong <- gather(propVis, key="Component", value="Credits", -proposal)
View(propVisLong)
currentndf <- filter(propVisLong, proposal=="current") %>% rename(id=Component, value=Credits)
View(currentndf)
currentndf <- filter(propVisLong, proposal=="current") %>% rename(id=Component, value=Credits) %>% select(-proposal)
tempdf <- filter(propComp, proposal=="current") %>% rename(id=item, value=Credits) %>% select(id, value)
tempdf <- filter(propComp, proposal=="current") %>% rename(id=item, value=credits) %>% select(id, value)
currentndf <- rbind.data.frame(currentndf, tempdf)
currentndf <- rbind.data.frame(currentndf, data.frame(id="Current", value=124))
currentedf <- filter(propVisLong, proposal=="current") %>% rename(from=Component, to=proposal) %>% select(from, to)
tempedf <- filter(propComp, proposal=="current") %>% rename(from=item, to=block) %>% select(from, to)
currentedf <- rbind.data.frame(currentedf, tempedf)
visNetwork(nodes=currentndf, edges = currentedf)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(knitr)
sb <- read.csv("craters-cleaned.csv", header = TRUE)
#separate species
sb3 <- filter(sb, species=="3T")
sbwy <- filter(sb, species=="WY")
#zero varience lists
zv3 <- 5+which(sapply(6:52, function(x) var(sb3[,x]))==0)
zvwy <- 5+which(sapply(6:52, function(x) var(sbwy[,x]))==0)
which(sapply(6:52, function(x) var(sb[sb$species=="WY",x]))==0)
library(ggridges)
sbl <- gather(sb, key=SB, value=Area, -c(id,species,browsed, CYP1A.grouse.micr, CYP1A.human.micr))
ggplot()+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="B"), aes(x=Area, y=SB),fill="red",    jittered_points = TRUE,
position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.4
)+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="NB"), aes(x=Area, y=SB),fill="blue",    jittered_points = TRUE,
position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.4
)+ggtitle("SB Area distribution for WY")
ggplot()+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="B"), aes(x=Area, y=SB),fill="red", alpha = 0.4
)+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="NB"), aes(x=Area, y=SB),fill="blue", alpha = 0.4
)+ggtitle("SB Area distribution for WY")
warnings()
sb3pcClass <- select(sb3, id, species, browsed, PC1, PC2, PC3, PC4, PC5, PC6, PC7, PC8, PC9, PC10)
#3t with non-zero-var
sb3tnzv <- sb3[, -zv3]
pca3t <- prcomp(sb3tnzv[,-c(1:5)], scale.=TRUE, center=TRUE)
pcvarDF <- data.frame(PC=1:length(pca3t$sdev),
ve=pca3t$sdev^2/sum(pca3t$sdev^2),
cve=cumsum(pca3t$sdev^2)/sum(pca3t$sdev^2))
#3t with non-zero-var
sbwynzv <- sbwy[, -zvwy]
pcawy <- prcomp(sbwynzv[,-c(1:5)], scale.=TRUE, center=TRUE)
pcvarWyDF <- data.frame(PC=1:length(pcawy$sdev),
ve=pcawy$sdev^2/sum(pcawy$sdev^2),
cve=cumsum(pcawy$sdev^2)/sum(pcawy$sdev^2))
sb3pcClass <- select(sb3, id, species, browsed, PC1, PC2, PC3, PC4, PC5, PC6, PC7, PC8, PC9, PC10)
View(pca3t)
ridgeWY
ridgeWY<-ggplot()+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="B"), aes(x=Area, y=SB),fill="red",    jittered_points = TRUE,
position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.4
)+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="NB"), aes(x=Area, y=SB),fill="blue",    jittered_points = TRUE,
position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.4
)+ggtitle("SB Area distribution for WY")
ridgeWY
library(dplyr)
library(ggplot2)
library(visNetwork)
library(tidyr)
propComp <- read.csv("prop-comp.csv", header=TRUE)
propVis <- read.csv("peak-prop-vis.csv", header=TRUE)
propVisLong <- gather(propVis, key="Component", value="Credits", -proposal)
View(propVisLong)
currentndf <- filter(propVisLong, proposal==prop) %>%
rename(id=Component, value=Credits) %>% select(-proposal) %>%
mutate(color=ifelse(id=="gen.ed", "green", ifelse(id=="major", "blue", ifelse(id=="electives", "red", "black"))))
currentndf <- filter(propVisLong, proposal==nsm1) %>%
;
currentndf <- filter(propVisLong, proposal=="nsm1") %>%
rename(id=Component, value=Credits) %>% select(-proposal) %>%
mutate(color=ifelse(id=="gen.ed", "green", ifelse(id=="major", "blue", ifelse(id=="electives", "red", "black"))))
View(currentndf)
library(dplyr)
library(stringr)
library(ggplot2)
library(tidyr)
f18.maps.majors.cleaned <- read.csv("f18-maps-majors-cleaned.csv")
setwd("~/gitlab/peak-nav")
f18.maps.majors.cleaned <- read.csv("f18-maps-majors-cleaned.csv")
f18mm <- select(f18.maps.majors.cleaned, id=Person.Id,
term = Stc.Term, crs=Stc.Course.Name)
f18mm$term <- str_replace(f18mm$term, "/FA", ".0")
f18mm$term <- str_replace(f18mm$term, "/WI", ".2")
f18mm$term <- str_replace(f18mm$term, "/SP", ".4")
f18mm$term <- str_replace(f18mm$term, "/SU", ".6")
f18mm$term <- as.numeric(f18mm$term)
f18mm$term2 <- ifelse((f18mm$term*10)%%10 !=0, f18mm$term-1, f18mm$term)
f18mm <- group_by(f18mm, id) %>% mutate(std.year=round(term2-floor(min(term2)),1)) %>% ungroup()
mmgrp <- group_by(f18mm, crs,std.year) %>%
summarise(cnt=n_distinct(id), terms = n_distinct(term2),
students = list(id))
mmgrp2 <- group_by(f18mm, crs) %>%
summarise(student.cnt=n_distinct(id), term.cnt = n_distinct(term2),
students = list(id))
mmgrp.nodes <- select(mmgrp, name=crs, std.year) %>% unite(id, name, std.year, sep="_", remove=FALSE)
#For edges
#need source=, target=, value=
#could make source and targets from cartesian product of courses
#then go through and increment value based on students taking a
#course before another, but this may not scale well.
s.crs <- select(f18mm, s.name=crs, s.std.year=std.year, id)
s.crs <- s.crs[!duplicated(s.crs),]
t.crs <- select(f18mm, t.name=crs, t.std.year=std.year, id)
t.crs <- t.crs[!duplicated(t.crs),]
edgePerStudent <- full_join(s.crs, t.crs) %>%
filter(s.name!=t.name, s.std.year<t.std.year) %>%
arrange(id, s.std.year, t.std.year)
View(edgePerStudent)
#build edge, couldn't figure out without for loop, had to ditch rle
edgeDF <- edgePerStudent[1,]
for(i in 2:nrow(edgePerStudent)){
if(edgeDF[nrow(edgeDF),]$id != edgePerStudent[i,]$id){
#different id's count
edgeDF <- rbind.data.frame(edgeDF, edgePerStudent[i,])
}
else if(edgeDF[nrow(edgeDF),]$s.std.year == edgePerStudent[i,]$s.std.year & edgeDF[nrow(edgeDF),]$t.std.year == edgePerStudent[i,]$t.std.year){
#same source and target as counting counts
edgeDF <- rbind.data.frame(edgeDF, edgePerStudent[i,])
}
else if(edgeDF[nrow(edgeDF),]$t.std.year == edgePerStudent[i,]$s.std.year){
#if last counted target is current source, it counts
edgeDF <- rbind.data.frame(edgeDF, edgePerStudent[i,])
}
}
View(edgeDF)
library(igraph)
?graph.data.frame()
#now count edge weights
edgeDF <- group_by(edgeDF, s.name, s.std.year, t.name,t.std.year) %>%
summarise(value=n_distinct(id))
edgeDF <- unite(edgeDF, s.id, s.name,s.std.year, sep="_", remove=FALSE) %>%
unite(t.id, t.name,t.std.year, sep="_", remove = FALSE)
#replace character s.id and t.id with numbers
mmgrp.nodes$node.id <- 1:nrow(mmgrp.nodes)
edgeDF <- inner_join(edgeDF, mmgrp.nodes[,c(1,4)], by=c("s.id"="id"))
edgeDF <- select(edgeDF, -s.id, source=node.id)
edgeDF <- inner_join(edgeDF, mmgrp.nodes[,c(1,4)], by=c("t.id"="id"))
edgeDF <- select(edgeDF, -t.id, target=node.id)
head(edgeDF)
edges <- select(edgeDF, source, target, value)
head(edges)
edges <- select(ungroup(edgeDF), source, target, value)
head(edges)
g <- graph_from_data_frame(edges)
g
degree.distribution(g)
degree(g)
?degree
a <- make_ring(10)
degree(a)
plot(g)
graph.cohesion(g)
summary(degree(g))
#switch to zero indexing for javascript
edgeDFTemp <- mutate(edgeDF, source=source-1, target = target-1)
nodeDFTemp <- mutate(mmgrp.nodes, nid = node.id-1, id =
ifelse(str_detect(id, "\\.6"),
str_replace(id, "\\.6","SU"),
ifelse(str_detect(id, "\\.4"),
str_replace(id, "\\.4", "SP"),
ifelse(str_detect(id, "\\.2"),
str_replace(id, "\\.2", "W"),
str_c(id, "FA")))))
sankeyNetwork(Links = edgeDFTemp, Nodes = nodeDFTemp, Source = "source",
Target = "target", Value = "value", NodeID = "id",
nodeWidth = 20, fontSize = 8, units = "students")
library(networkD3)
sankeyNetwork(Links = edgeDFTemp, Nodes = nodeDFTemp, Source = "source",
Target = "target", Value = "value", NodeID = "id",
nodeWidth = 20, fontSize = 8, units = "students")
data(flights)
library(ggplot2)
library(dplyr)
install.packages("flights")
dim(degree(g))
length(degree(g))
degree_distribution(g)
hist(degree.distribution(g))
plot(degree.distribution(g))
View(f18.maps.majors.cleaned)
library(dplyr)
library(stringr)
library(ggplot2)
library(tidyr)
f18.maps.majors.cleaned <- read.csv("f18-maps-majors-cleaned.csv")
f18mm <- select(f18.maps.majors.cleaned, id=Person.Id,
term = Stc.Term, crs=Stc.Course.Name)
f18mm$term <- str_replace(f18mm$term, "/FA", ".0")
f18mm$term <- str_replace(f18mm$term, "/WI", ".2")
f18mm$term <- str_replace(f18mm$term, "/SP", ".4")
f18mm$term <- str_replace(f18mm$term, "/SU", ".6")
f18mm$term <- as.numeric(f18mm$term)
f18mm$term2 <- ifelse((f18mm$term*10)%%10 !=0, f18mm$term-1, f18mm$term)
f18mm <- group_by(f18mm, id) %>% mutate(std.year=round(term2-floor(min(term2)),1)) %>% ungroup()
View(f18mm)
View(f18mm)
select(f18mm, id, crs, std.year) %>% write.csv(file="math-major-anon.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = FALSE)
library(dplyr)
library(ggplot2)
library(stringr)
library(tidyr)
library(networkD3)
students <- read.csv("math-majors-anon.csv", header=TRUE)
students %>% head() %>% knitr::kable()
students <- read.csv("math-major-anon.csv", header=TRUE)
students %>% head() %>% knitr::kable()
ggplot(students, aes(x=as.factor(std.year)))+geom_bar()
students %>% group_by(crs) %>% summarise(Count = n_distinct(std.year), Num.Students = n_distinct(id)) %>% View()
students %>% group_by(crs) %>% summarise(Count = n_distinct(std.year), Num.Students = n_distinct(id)) %>% arrange(desc(Num.Students), desc(Count)) %>% View()
mmgrp <- group_by(f18mm, crs,std.year) %>%
summarise(cnt=n_distinct(id), terms = n_distinct(term2),
students = list(id))
mmgrp.nodes <- select(mmgrp, name=crs, std.year) %>% unite(id, name, std.year, sep="_", remove=FALSE)
View(mmgrp)
View(mmgrp.nodes)
setwd("/home/jpreszler/github-web/jpreszler/")
blogdown::serve_site()
lending.club <- read.csv("~/gitlab/cs270-s18/data/lending-club.csv")
lending.club <- read.csv("~/gitlab/cs270-s18/data/lending-club.csv", header=FALSE)
View(lending.club)
View(lending.club)
library(dplyr)
filter(lending.club, loan_amnt != funded_amnt)
lending.club <- read.csv("~/gitlab/cs270-s18/data/lending-club.csv", header=TRUE)
View(lending.club)
filter(lending.club, loan_amnt != funded_amnt)
lc2 <- select(lending.club, 1:54)
View(lc2)
lc2 <- select(lc2, c(2:19,21:29, 32:33,36,38:50,54))
write.csv(lc2, file="/home/jpreszler/github-web/csc285/In-class/lending-club-reduced.csv", row.names = FALSE)
