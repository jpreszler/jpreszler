position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.7
)+facet_wrap(~browsed)+ggtitle("SB Area distribution for 3T")
range(sbl$Area)
range(sbl$Area)[,1]
range(sbl$Area)[1]
group_by(sbl, browsed, SB) %>% summarise(ma = min(Area), max=max(Area), n=n(), nd=n_distinct(Area))
group_by(sbl, browsed, SB) %>% summarise(ma = min(Area), max=max(Area), n=n(), nd=n_distinct(Area)) %>% View()
group_by(sbl, species, browsed, SB) %>% summarise(ma = min(Area), max=max(Area), n=n(), nd=n_distinct(Area)) %>% View()
group_by(sbl, species, browsed, SB) %>% summarise(ma = min(Area), max=max(Area), n=n(), nd=n_distinct(Area), rpd = (max-ma)/nd) %>% View()
group_by(sbl, species, browsed, SB) %>% summarise(ma = min(Area), max=max(Area), n=n(), nd=n_distinct(Area), rpd = (max-ma)/nd) -> sbVarGrp
ggplot(sbVarGrp, aes(x=rpd))+geom_histogram()
arrange(sbVarGrp, rpd)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(knitr)
sb <- read.csv("craters-cleaned.csv", header = TRUE)
#separate species
sb3 <- filter(sb, species=="3T")
sbwy <- filter(sb, species=="WY")
#zero varience lists
zv3 <- 5+which(sapply(6:52, function(x) var(sb3[,x]))==0)
zvwy <- 5+which(sapply(6:52, function(x) var(sbwy[,x]))==0)
ggplot()+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="B"), aes(x=Area, y=SB),fill="red",    jittered_points = TRUE,
position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.4
)+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="NB"), aes(x=Area, y=SB),fill="blue",    jittered_points = TRUE,
position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.4
)facet_wrap(~browsed)+ggtitle("SB Area distribution for WY")
ggplot()+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="B"), aes(x=Area, y=SB),fill="red", alpha = 0.4
)+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="NB"), aes(x=Area, y=SB),fill="blue", alpha = 0.4
)+ggtitle("SB Area distribution for WY")
library(ggridges)
ggplot()+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="B"), aes(x=Area, y=SB),fill="red", alpha = 0.4
)+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="NB"), aes(x=Area, y=SB),fill="blue", alpha = 0.4
)+ggtitle("SB Area distribution for WY")
sbl <- gather(sb, key=SB, value=Area, -c(id,species,browsed, CYP1A.grouse.micr, CYP1A.human.micr))
ggplot()+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="B"), aes(x=Area, y=SB),fill="red", alpha = 0.4
)+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="NB"), aes(x=Area, y=SB),fill="blue", alpha = 0.4
)+ggtitle("SB Area distribution for WY")
)+ggtitle("SB Area distribution for WY")
ggplot()+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="B"), aes(x=Area, y=SB),fill="red", alpha = 0.4
)+geom_density_ridges(data=filter(sbl, species=="WY",browsed=="NB"), aes(x=Area, y=SB),fill="blue", alpha = 0.4
)+ggtitle("SB Area distribution for WY")
install.packages("later")
library(HistData)
data("Wheat")
head(Wheat)
library(ggplot2)
ggplot(Wheat, aes(x=Wheat, y=Wages))+geom_point()
lm(Wages~Wheat, data=Wheat)
data("Cholera")
wheat.lm <- lm(Wages~Wheat, data=Wheat)
wheat.lm$residuals
wheat.lm$fitted.values
ggplot(wheat.lm, aes(x=fitted.values, y=residuals))+geom_point()
library(tidyr)
tidy(wheat.lm)
library(broom)
tidy(wheat.lm)
data.frame(residual = wheat.lm$residuals, fitted = wheat.lm$fitted.values) %>% ggplot(aes(x=fitted, y=residual))+geom_point()
head(Cholera)
ggplot(Cholera, aes(x=elevation, y=cholera_drate))+geom_point()
lm(cholera_drate~elevation, data=Cholera)
library(nycflights13)
head(flights)
ggplot(flights, aes(x=distance, y=arr_delay))+geom_point()
library(freqparcoord)
data(mlb)
freqparcoord(mlb,5,4:6,7,method="maxdens")
regdiag(wheat.lm)
View(Cholera)
ch.lm <- lm(cholera_drate~ elevation+pop_dens+poor_rate, data=Cholera)
regdiag(ch.lm)
ch.lm
data("prgeng")
head(prgeng)
ggpairs(prgeng)
data(oliveoils)
head(oliveoils)
shiny::runApp('github-web/CofI-Shiny/Course_Time')
runApp('github-web/CofI-Shiny/Course_Time')
runApp('github-web/CofI-Shiny/Course_Time')
runApp('github-web/CofI-Shiny/Course_Time')
data(birthwt)
data("airquality")
head(airquality)
gather(airquality, key=var, value=data, -c9Month, Day)) %>% ggplot(aes(y=data))+geom_boxplot()+facet_wrap(~var, scales = "free_y")
gather(airquality, key=var, value=data, -c(Month, Day)) %>% ggplot(aes(y=data))+geom_boxplot()+facet_wrap(~var, scales = "free_y")
library(GGally)
ggpairs(airquality)
lm(Ozone~Solar.R+Temp+Wind, data=airquality)
lm(Ozone~Solar.R+Temp+Wind-1, data=airquality)
lm(Ozone~Solar.R+Temp+Wind, data=airquality)
lm(Ozone~Solar.R+Temp+Wind+Temp:Wind+Temp:Solar.R+Wind:Solar.R, data=airquality)
lm(Ozone~Solar.R+Temp+Wind+Temp:Wind, data=airquality)
aq2<-lm(Ozone~Solar.R+Temp+Wind+Temp:Wind, data=airquality)
aq1<-lm(Ozone~Solar.R+Temp+Wind, data=airquality)
summary(aq1)
summary(aq2)
ggplot(aq1, aes(x=.fitted, y=.resid))+geom_point()
ggplot(aq2, aes(x=.fitted, y=.resid))+geom_point()
aq3<-lm(Ozone~Solar.R+Temp+Wind+Temp:Wind+Temp:Temp, data=airquality)
summary(aq3)
aq3<-lm(Ozone~Solar.R+Temp+Wind+Temp:Wind+Temp^2, data=airquality)
summary(aq3)
aq3<-lm(Ozone~Solar.R+Temp*Temp+Wind+Temp:Wind, data=airquality)
summary(aq3)
aq3<-lm(Ozone~Solar.R+Temp+I(Temp*Temp)+Wind+Temp:Wind, data=airquality)
summary(aq3)
ggplot(aq3, aes(x=.fitted, y=.resid))+geom_point()
anova(aq1, aq2)
anova(aq2, aq3)
library(dplyr)
library(ggplot2)
library(tidyr)
library(broom)
library(patchwork)
data(airquality)
tidy(aq1,aq2)
tidy(aq1)
library(carData)
data("States")
head(States)
data(Wong)
head(Wong)
?Wong
data("longley")
head(longley)
install.packages("Ecdat")
library(Ecdat)
?Mishkin
?Males
install.packages("ISLR")
library(ISLR)
?OJ
?Credit
sleepstudy <- read.csv("~/Downloads/sleepstudy.csv")
View(sleepstudy)
ggplot(sleepstudy, aes(x=Days, y=Reaction))+geom_point()
ss <- lm(Reaction~Days, data=sleepstudy)
summary(ss)
ggplot(ss, aes(x=.fitted, y=.resid))+geom_point()
length(unique(sleepstudy$Subject))
sleepstudy %>% group_by(Subject) %>% summarise(mean = mean(Reaction), sd= sd(Reaction))
kiq <- read.dta("~/Downloads/kidiq.dta")
install.packages("foreign")
library(foreign)
kiq <- read.dta("~/Downloads/kidiq.dta")
View(kiq)
k1 <- lm(kid_score~mom_iq, data=kiq)
k2 <- lm(kid_score~mom_iq+mom_hs, data=kiq)
ggplot(k1, aes(x=.fitted, y=.resid))+geom_point()
ggplot(k2, aes(x=.fitted, y=.resid))+geom_point()
summary(k1)
summary(k2)
data("airquality")
aq0 <- lm(Ozone~Temp, data=airquality)
summary(aq0)
ggplot(aq0, aes(x=.fitted, y=.resid))+geom_point()
aq0 <- lm(Ozone~Wind, data=airquality)
ggplot(aq0, aes(x=.fitted, y=.resid))+geom_point()
summary(aq0)
aq0 <- lm(Ozone~Solar.R, data=airquality)
summary(aq0)
ggplot(aq0, aes(x=.fitted, y=.resid))+geom_point()
aq0 <- lm(Ozone~Temp, data=airquality)
aq1 <- lm(Ozone~Temp*Wind, data=airquality)
summary(aq1)
summary(aq0)
ggplot(aq0, aes(x=.fitted, y=.resid))+geom_point()
ggplot(aq1, aes(x=.fitted, y=.resid))+geom_point()
aq1$residuals
View(airquality)
data(airquality)
airqual <- airquality[-117,] %>% dplyr::select(-c("Month", "Day")) %>% filter(!is.na(Ozone))
aq1<-lm(Ozone~Temp, data=airqual)
aq2<-lm(Ozone~Solar.R+Temp+Wind+Temp:Wind, data=airqual)
summary(aq1)
summary(aq2)
aq1$residuals
aq3<-lm(Ozone~Solar.R+Temp+Wind+Temp:Wind+Temp:Solar.R, data=airqual)
aq2$residuals
summary(aq3)
anova(aq2,aq3)
ggplot(aq3, aes(x=.fitted, y=.resid))+geom_point()
aq3$residuals
?airquality
.13/sqrt(40)
26*.7
8.5*.7
nm <- read.csv("~/nsm-majors.csv", header=TRUE)
mean(nm$Max.Credits)
mean(nm$Min.Credits)
library(ggplot2)
library(plotly)
library(stringr)
filter(nm, str_count(PEAK, ";")>2) %>% gather(key=Range, value=Credits, -c(Name, Capstone, PEAK) )%>% ggplot(aes(x=Range, y=Credits))+geom_point(position="jitter")
library(tidyr)
filter(nm, str_count(PEAK, ";")>2) %>% gather(key=Range, value=Credits, -c(Name, Capstone, PEAK) )%>% ggplot(aes(x=Range, y=Credits))+geom_point(position="jitter")
filter(nm, str_count(PEAK, ";")>2) %>% gather(key=Range, value=Credits, -c(Name, Capstone, PEAK) )%>% head()
filter(nm, str_count(PEAK,";")>2)
head(nm)
str_count(nm$PEAK)
str_count(nm$PEAK,";")
filter(nm, str_count(nm$PEAK, ";")>2) %>% gather(key=Range, value=Credits, -c(Name, Capstone, PEAK) )%>% ggplot(aes(x=Range, y=Credits))+geom_point(position="jitter")
filter(nm, str_count(nm$PEAK,";")>2)
filter(nm, str_count(nm$PEAK,";")<2)
filter(nm, str_count(nm$PEAK, ";")<2) %>% gather(key=Range, value=Credits, -c(Name, Capstone, PEAK) )%>% ggplot(aes(x=Range, y=Credits))+geom_point(position="jitter")
filter(nm, str_count(nm$PEAK, ";")<2) %>% gather(key=Range, value=Credits, -c(Name, Capstone, PEAK) )%>% ggplot(aes(x=Range, y=Credits, col=Range))+geom_point(position="dodge")
filter(nm, str_count(nm$PEAK, ";")<2) %>% gather(key=Range, value=Credits, -c(Name, Capstone, PEAK) )%>% ggplot(aes(x=Range, y=Credits, col=Range))+geom_point()+geom_path()
filter(nm, str_count(nm$PEAK, ";")<2) %>% gather(key=Range, value=Credits, -c(Name, Capstone, PEAK) )%>% ggplot(aes(x=Range, y=Credits, col=Range))+geom_point()+geom_path(aes(group=Name))
filter(nm, str_count(nm$PEAK, ";")<2) %>% gather(key=Range, value=Credits, -c(Name, Capstone, PEAK) )%>% ggplot(aes(x=Range, y=Credits, col=Range))+geom_point()+geom_path(aes(group=Name), col="black")
filter(nm, str_count(nm$PEAK, ";")<2) %>% gather(key=Range, value=Credits, -c(Name, Capstone, PEAK) )%>% ggplot(aes(x=Range, y=Credits, col=Range))+geom_point()+geom_path(aes(group=Name), col="black") %>% ggplotly()
filter(nm, str_count(nm$PEAK, ";")<2) %>% gather(key=Range, value=Credits, -c(Name, Capstone, PEAK) )%>% ggplot(aes(x=Range, y=Credits, col=Range))+geom_point()+geom_path(aes(group=Name), col="black") -> p
ggplotly(p)
filter(nm, str_count(nm$PEAK, ";")<2) %>% gather(key=Range, value=Credits, -c(Name, Capstone, PEAK) )%>% ggplot(aes(x=Range, y=Credits, col=Name))+geom_point()+geom_path(aes(group=Name)) -> p
ggplotly(p)
filter(nm, str_count(nm$PEAK, ";")<2) %>% gather(key=Range, value=Credits, -c(Name, Capstone, PEAK) )%>% ggplot(aes(x=Range, y=Credits, col=Name, group=Name))+geom_point()+geom_path() -> p
ggplotly(p)
library(rvest)
library(stringr)
library(dplyr)
library(purrr)
library(tidyr)
#url for courses in catalog
base_url <- "http://collegeofidaho.smartcatalogiq.com"
base_url_ext <- "/en/current/Undergraduate-Catalog/PEAK-Majors/"
base_html <- read_html(paste0(base_url,base_url_ext))
#extract links from base page
minorLinks <- html_nodes(base_html, 'a')
#convert links to text
minorText <- html_text(subjectLinks)
#convert links to text
minorText <- html_text(minorLinks)
minorText
major_url <- html_attr(majorLinks, 'href')[35:69]
#pick out what corresponds to subject list
#we now have subject codes and names
majorText <- majorText[35:69]
majorDF <- data.frame(Major = majorText)
#get url for subject, for each row in subDF
#subDF <-subDF %>% mutate(url= paste0(base_url,base_url_ext,'/',sub,'-',str_replace_all(subject,' ','-')))
majorDF <- mutate(majorDF, url=paste0(base_url,major_url))
#pick out what corresponds to subject list
#we now have subject codes and names
majorText <- majorText[35:69]
#extract links from base page
majorLinks <- html_nodes(base_html, 'a')
#convert links to text
majorText <- html_text(majorLinks)
major_url <- html_attr(majorLinks, 'href')[35:69]
#pick out what corresponds to subject list
#we now have subject codes and names
majorText <- majorText[35:69]
majorDF <- data.frame(Major = majorText)
#get url for subject, for each row in subDF
#subDF <-subDF %>% mutate(url= paste0(base_url,base_url_ext,'/',sub,'-',str_replace_all(subject,' ','-')))
majorDF <- mutate(majorDF, url=paste0(base_url,major_url))
get_class_list <- function(i){
# if(i==12){
#  return(data.frame(Minor=minorDF$Minor[i], sub = "", num = "", url=""))
#}
#get list of links on subject page
class_links <- html_nodes(read_html(majorDF$url[i]), 'a')
#turn links to text
class_list <- html_text(class_links)
class_url <- html_attr(class_links, 'href')
classDF <- data.frame(Minor = rep(majorDF$Major[i], length(class_list)), list=class_list, url=class_url)
#only keep links for classes, each subject has
#classes starting in a different position
classDF <- classDF %>% filter(str_detect(list, "[:upper:]{2,}-[:digit:]+"))
#two theater classes have typos -THE-###
#this is solely dealing with that
classDF$list <- str_replace(classDF$list, "-THE", "THE")
#back to normal
classDF <- separate(classDF, list, into=c("sub", "number"), sep="-")
#the id field has the last part of the new url, we need the
#subject url with the course level (100,200,etc) then id
classDF <- mutate(classDF,url=paste0(base_url,url))
#for test/debug
#print(i)
return(classDF)
}
classes <- map_dfr(1:length(majorDF$Major), get_class_list)
View(classes)
get_class_list <- function(i){
# if(i==12){
#  return(data.frame(Minor=minorDF$Minor[i], sub = "", num = "", url=""))
#}
#get list of links on subject page
class_links <- html_nodes(read_html(majorDF$url[i]), 'a')
#turn links to text
class_list <- html_text(class_links)
class_url <- html_attr(class_links, 'href')
classDF <- data.frame(Major = rep(majorDF$Major[i], length(class_list)), list=class_list, url=class_url)
#only keep links for classes, each subject has
#classes starting in a different position
classDF <- classDF %>% filter(str_detect(list, "[:upper:]{2,}-[:digit:]+"))
#two theater classes have typos -THE-###
#this is solely dealing with that
classDF$list <- str_replace(classDF$list, "-THE", "THE")
#back to normal
classDF <- separate(classDF, list, into=c("sub", "number"), sep="-")
#the id field has the last part of the new url, we need the
#subject url with the course level (100,200,etc) then id
classDF <- mutate(classDF,url=paste0(base_url,url))
#for test/debug
#print(i)
return(classDF)
}
classes <- map_dfr(1:length(majorDF$Major), get_class_list)
classes2 <- classes[!duplicated(classes),]
View(classes2)
shiny::runApp('github-web/CofI-Shiny/Course_Time')
forestfires <- read.csv("~/Downloads/forestfires.csv")
View(forestfires)
ff1 <- lm(area~temp+RH+wind+rain, data=forestfires)
summary(ff1)
ggplot(ff1, aes(x=.fitted, y=.resid))+geom_point()
library(ggplot2)
ggplot(ff1, aes(x=.fitted, y=.resid))+geom_point()
boxplot(forestfires$area)
summary(forestfires$area)
library(dplyr)
ffc <- forestfires %>% select(month, day, temp, RH, wind, rain, area) %>% filter(area < 200)
boxplot(ffc$area)
summary(ffc$area)
ffc$la <- log(ffc$area)
boxplot(ffc$la)
View(ffc)
ffc <- forestfires %>% select(month, day, temp, RH, wind, rain, area) %>% filter(area < 100, area>0)
summary(ffc$area)
library(GGally)
ggpairs(ffc)
summary(ffc$month)
ffc <- forestfires %>% select(month, day, temp, RH, wind, rain, area) %>% filter(area < 100, area>0, month=="aug" | month=="sep")
library(lme4)
MASS::DDT
write.csv(ffc, file="forest-fires2.csv", row.names = FALSE)
write.csv(ffc, file="~/Downloads/forest-fires2.csv", row.names = FALSE)
library(ggplot2)
data("swiss")
names(swiss)
data("diamonds")
names(diamonds)
summary(lm(price~carat+color+cut+clarity, data=diamonds))
summary(lm(price~carat+color+cut, data=diamonds))
summary(lm(price~carat+cut, data=diamonds))
summary(lm(price~carat, data=diamonds))
names(diamonds)
View(diamonds)
summary(lm(price~depth+table, data=diamonds))
titanic <- read.csv("~/Downloads/titanic.csv")
View(titanic)
train <- read.csv("~/Downloads/train.csv")
View(train)
trIdx <- sample(1:length(train$PassengerId), .8*length(train$PassengerId), replace=FALSE)
titanic <- train[trIdx,]
library(dplyr)
?Titanic
titanic <- titanic %>% select(-Name)
View(titanic)
titanicTST <- train[-trIdx,] %>% select(-Name)
write.csv(titanic, file="~/gitlab/m212/titanic-train.csv", row.names = FALSE)
write.csv(select(titanicTST, -Survived), file="~/gitlab/m212/titanic-test.csv", row.names = FALSE)
write.csv(titanicTST, file="~/gitlab/m212/titanic-test-real.csv", row.names = FALSE)
titanic.glm <- glm(Survived ~ Pclass+Sex+Age+Fare, data=titanic, family=binomial())
?predict
predict(titanic.glm)
predict(titanic.glm, type = "prob")
predict(titanic.glm, type = "link")
predict(titanic.glm, type = "response")
titanic$predict <- predict(titanic.glm, type = "response")
titanic$predict <- predict(titanic.glm, titanic[,-2],type = "response")
View(titanic)
length(is.na(titanic$predict))
sum(is.na(titanic$predict))
712-141
library(caret)
shiny::runApp('github-web/CofI-Shiny/TitanicTest')
runApp('github-web/CofI-Shiny/TitanicTest')
runApp('github-web/CofI-Shiny/TitanicTest')
runApp('github-web/CofI-Shiny/TitanicTest')
runApp('github-web/CofI-Shiny/TitanicTest')
runApp('github-web/CofI-Shiny/TitanicTest')
runApp('github-web/CofI-Shiny/TitanicTest')
runApp('github-web/CofI-Shiny/TitanicTest')
1600-1573.23
26.77+378.82
A.pyClust <- read.csv("~/gitlab/math-placement/data/A-pyClust.csv")
View(A.pyClust)
A.pyClust$gml <- ifelse(A.pyClust$gml==0, 1, 0)
A.pyClust$acl <- ifelse(A.pyClust$acl==0, 1, 0)
library(ggplot2)
ggplot(A.pyClust, aes(x=score, y=subscore, col=Crs, size=(kml+scl+acl+gml)))+geom_point()
ggplot(A.pyClust, aes(x=score, y=subscore, col=as.factor(Crs), size=(kml+scl+acl+gml)))+geom_point()
ggplot(A.pyClust, aes(x=score, y=subscore, col=as.factor(Crs), shape=as.factor(kml+scl+acl+gml), alpha=FinalAve))+geom_point()
ggplot(A.pyClust, aes(x=score, y=subscore, col=as.factor(Crs), shape=as.factor(kml+scl+acl+gml), size=FinalAve))+geom_point()
library(dplyr)
A.pyClust %>% filter(subscore>.5, Crs==101)
A.pyClust %>% filter(subscore>.5, Crs==101) %>% select(LastName) -> m101gLN
A.pyClust %>% filter(LastName %in% m101gLN)
m101gLN
A.pyClust %>% filter(LastName %in% m101gLN$LastName)
library(caret)
mp.rf <- train(Course~ score+subscore+kml+scl+acl+gml+X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16, method="rf", trControl = trainControl(method="cv", number=7))
mp.rf <- train(Course~ score+subscore+kml+scl+acl+gml+X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16, data=A.pyClust,method="rf", trControl = trainControl(method="cv", number=7))
varImp(mp.rf)
mp.rf$bestTune
mp.rf$finalModel$err.rate
mp.rf$finalModel$confusion
varImp(mp.rf)
mp.rf <- train(Course~ score+subscore+kml+scl+acl+gml, data=A.pyClust,method="rf", trControl = trainControl(method="cv", number=7))
varImp(mp.rf)
library(GGally)
ggpairs(A.pyClust[,c(7,36:41)])
mp.rf$finalModel$importanceSD
mp.rf$finalModel$importance
mp.rf <- train(Course~ score+kml+scl+acl+gml+X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16, data=A.pyClust,method="rf", trControl = trainControl(method="cv", number=7))
varImp(mp.rf)
mp.rf <- train(Course~ kml+scl+acl+gml+X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16, data=A.pyClust,method="rf", trControl = trainControl(method="cv", number=7))
varImp(mp.rf)
mp.rf <- train(Course~ kml+scl+gml+X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16, data=A.pyClust,method="rf", trControl = trainControl(method="cv", number=7))
varImp(mp.rf)
mp.rf <- train(Course~ kml+scl+gml+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16, data=A.pyClust,method="rf", trControl = trainControl(method="cv", number=7))
varImp(mp.rf)
install.packages("mvtnorm")
library(mvtnorm)
A <- rmvnorm(100, mean=c(20,75))
A
B <- rmvnorm(100, mean=c(17,67))
library(ggplot2)
ggplot()+geom_point(A, aes(x=A[,1],y=A[,2], col='red'))+geom_point(B, aes(x=B[,1],y=B[,2], col='blue'))
df <- as.data.frame(A)
head(df)
df <- rbind.data.frame(df, as.data.frame(B))
df$V3 = c(rep("A",100),rep("B",100))
ggplot(df, aes(x=V1,y=V2, col=V3))+geom_point()
cvA <- matrix(runif(3^2), ncol = 2)
cvA <- matrix(runif(4), ncol = 2)
cvB <- matrix(runif(4), ncol = 2)
cvA <- t(cvA)%*%cvA
cvB <- t(cvB)%*%cvB
A <- rmvnorm(100, mean=c(20,75), sigma = cvA)
B <- rmvnorm(100, mean=c(17,67), sigma = cvB)
df <- rbind.data.frame(as.data.frame(A), as.data.frame(B))
df$V3 <- c(rep("A",100),rep("B",100))
ggplot(df, aes(x=V1,y=V2, col=V3))+geom_point()
knitr::opts_chunk$set(echo = TRUE)
library(mvtnorm) #gets rmvnorm function
#function to make random covariance matrices
randCov <- function(n=2, k=1){
mat <- matrix(runif(n^2)*k, ncol=n)
return(t(mat)%*%mat) #make mat symmetric and return
}
cv1 <- randCov(2,3)
cv2 <- randCov(2,1.5)
A <- rmvnorm(100, mean=c(20,75), sigma = cvA)
B <- rmvnorm(100, mean=c(18,71), sigma = cvB)
df <- rbind.data.frame(as.data.frame(A), as.data.frame(B))
df$V3 <- c(rep("A",100),rep("B",100))
library(ggplot2)
library(patchwork)
gNoLab <- ggplot(df, aes(x=V1, y=V2))+geom_point()
gLab <- ggplot(df, aes(x=V1, y=V2, col=V3))+geom_point()
gNoLab+gLab
library(mvtnorm) #gets rmvnorm function
#function to make random covariance matrices
randCov <- function(n=2, k=1){
mat <- matrix(runif(n^2)*k, ncol=n)
return(t(mat)%*%mat) #make mat symmetric and return
}
cv1 <- randCov(2,3)
cv2 <- randCov(2,1.5)
A <- rmvnorm(100, mean=c(20,75), sigma = cvA)
B <- rmvnorm(100, mean=c(18,73), sigma = cvB)
df <- rbind.data.frame(as.data.frame(A), as.data.frame(B))
df$V3 <- c(rep("A",100),rep("B",100))
library(ggplot2)
library(patchwork)
gNoLab <- ggplot(df, aes(x=V1, y=V2))+geom_point()
gLab <- ggplot(df, aes(x=V1, y=V2, col=V3))+geom_point()
gNoLab+gLab
library(mvtnorm) #gets rmvnorm function
#function to make random covariance matrices
randCov <- function(n=2, k=1){
mat <- matrix(runif(n^2)*k, ncol=n)
return(t(mat)%*%mat) #make mat symmetric and return
}
cv1 <- randCov(2,3)
cv2 <- randCov(2,1.5)
A <- rmvnorm(100, mean=c(20,75), sigma = cvA)
B <- rmvnorm(100, mean=c(18,72), sigma = cvB)
df <- rbind.data.frame(as.data.frame(A), as.data.frame(B))
df$V3 <- c(rep("A",100),rep("B",100))
library(ggplot2)
library(patchwork)
gNoLab <- ggplot(df, aes(x=V1, y=V2))+geom_point()
gLab <- ggplot(df, aes(x=V1, y=V2, col=V3))+geom_point()
gNoLab+gLab
install.packages("reticulate")
?knitr
library(reticulate)
use_python("/usr/bin/python") # I'm using python 3.7.1 in Arch linux
library(reticulate)
use_python("/usr/bin/python") # I'm using python 3.7.1 in Arch linux
setwd("/home/jpreszler/github-web/jpreszler/")
blogdown::serve_site()
